#!/usr/bin/env bb

;; TODO: turn this into a babashka task

(require '[clojure.string :as str])
(require '[clojure.edn :as edn])
(require '[babashka.http-client :as http])
(require '[taoensso.timbre :as log])
(require '[cheshire.core :as json])

(defn strip-quotes [s]
  (clojure.string/replace s #"^[\"](.*)[\"]$" "$1"))

;; Read and parse .env into a map
(def env (->> (slurp ".env")
              (str/split-lines)
              (remove #(str/starts-with? % "#")) ; Remove comments
              (remove #(str/blank? %)) ; Remove blank lines
              (map #(str/split % #"\s*=\s*")) ; Split key-value pairs
              (map (fn [[k v]] [k (strip-quotes v)])) ; Strip value leading and trailing quotes
              (into {})))

(def oi-api-key (env "OI_API_KEY"))
(def oi-url (env "OI_URL"))

(def oi-knowledge (-> "oi-knowledge.edn" slurp edn/read-string))

(doseq [[k-id k] oi-knowledge]
  (doseq [[f-id path] (:files k)
          :let [f-url (str oi-url "/api/v1/files/" f-id "/data/content/update")
                k-url (str oi-url "/api/v1/knowledge/" k-id "/file/update")]]
    (prn f-url)
    (prn k-url)
    (prn [k-id f-id path])
    (log/infof "Updating file %s in knowledge %s with contents of %s..." f-id k-id path)
    (http/post f-url
               {:headers {:content-type "application/json"}
                :oauth-token oi-api-key
                :body (json/generate-string {"content" (slurp path)})})
    (log/infof "Updating file %s in knowledge %s..." f-id k-id path)
    (http/post k-url
               {:headers {:content-type "application/json"}
                :oauth-token oi-api-key
                :body (json/generate-string {"file_id" f-id})})
    (log/info "Updates complete.")))

;; vim: ft=clojure
